{"version":3,"sources":["app.tsx","serviceWorker.ts","index.tsx","images/loading.svg"],"names":["App","useState","loading","usdCost","data","orderBook","buyQuantity","sellAvailable","buyAvailable","sellTotal","buyTotal","totals","spread","state","setState","useRef","useEffect","getOrderBook","a","console","log","fetch","method","headers","response","json","content","sellValue","buyValue","sellSpread","buySpread","sellData","arrayLength","length","i","type","quantity","price","push","map","item","key","className","Number","toLocaleString","JSON","stringify","value","name","onChange","event","target","ref","readOnly","onClick","parse","parseFloat","total","src","alt","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.de162c09.chunk.js","sourcesContent":["import React, {useState, useRef, useEffect}  from 'react';\nimport loading from './images/loading.svg';\n\nconst App: React.FC = () => {\n  const [state, setState] = useState({loading: true, usdCost: '', data: '', orderBook: '', buyQuantity: '', sellAvailable: 0, buyAvailable: 0, sellTotal: 0, buyTotal: 0, totals: '', spread:0});\n  const usdCost = useRef<HTMLInputElement>(null);\n\n\n\nuseEffect(() => {\n  const getOrderBook = async() => {\n    console.log('fetching');\n    try {\n    const response = await fetch('https://cors-anywhere.herokuapp.com/https://api.chainrift.com/v1/Public/GetOrderBook?symbol=WBIUSDT', {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n    });\n    const content = await response.json();\n\n    if (content && content.data) {\n    let sellTotal: number = 0;\n    let buyTotal: number = 0;\n    let sellValue: number = 0;\n    let buyValue: number = 0;\n    let sellSpread: number = 0;\n    let buySpread: number = 0;\n    let sellData: any = [];\n    const arrayLength = content.data.length;\n\n    for (var i = 0; i < arrayLength; i++) {\n      if (content.data[i].type === 'Sell') {\n        sellTotal += content.data[i].quantity;\n        sellValue += (content.data[i].quantity * content.data[i].price);\n        if (sellSpread === 0) {sellSpread = content.data[i].price}\n        sellData.push(content.data[i])\n      };\n      if (content.data[i].type === 'Buy') {\n        buyTotal += content.data[i].quantity;\n        buyValue += (content.data[i].quantity * content.data[i].price);\n        buySpread = content.data[i].price;\n      };\n    }\n    const spread = sellSpread - buySpread ;\n    const orderBook = content.data.map((item: any, key: any) => <span key={key} className={item.type}><div>{item.type}</div><div>{'WBI ' + item.quantity}</div><div>{'$ ' + item.price}</div><div>{'$ ' +Number(item.price*item.quantity).toLocaleString('en')}</div></span>);\n    setState({...state, loading: false, data: JSON.stringify(sellData), spread, orderBook, sellAvailable: sellTotal, buyAvailable: buyTotal, sellTotal: sellValue, buyTotal: buyValue});  \n  }\n}\n  catch(error) {\n    console.log(error);\n  }\n}\n  if (!state.orderBook) {\n      getOrderBook();\n  }\n}, [state]);\n\nconst submitForm = () => {\n  const data = JSON.parse(state.data);\n  const arrayLength = data.length;\n  let buyQuantity = parseFloat(state.buyQuantity);\n  let total = 0;\n\n  for (var i = 0; i < arrayLength; i++) {\n    if (buyQuantity > 0  && buyQuantity < data[i].quantity) {\n      total += buyQuantity * data[i].price;\n      console.log(`you just perchased ${buyQuantity} at the price of ${data[i].price} a toal spend of ${total}`)\n      buyQuantity = 0;\n      console.log('You have 0 left to buy')\n    } else if (buyQuantity > 0 && buyQuantity > data[i].quantity) {\n      total += data[i].quantity * data[i].price;\n      console.log(`you just perchased ${data[i].quantity} at the price of ${data[i].price} a toal spend of ${total}`)\n      buyQuantity = buyQuantity -= data[i].quantity;\n      console.log(`You have ${buyQuantity} left to buy`)\n    }\n  }\n\n  setState({...state, usdCost: `$  ${Number(total).toLocaleString('en')}`});\n  \n}\n\nconst formValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n  setState({...state, [event.target.name]: event.target.value})\n}\n// const formValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n//   getOrderBook(parseFloat(event.target.value));\n// }\n\n   const buyQuantity = useRef<HTMLInputElement>(null);\n\n  return (\n    <div className=\"layout-grid\">\n      <div className='layout-title'>WBIxUSDT order book price calculator</div>\n\n      <div className='section-grid'>\n        <div>Quantity</div>\n        <div>\n          <label>Buy WBI Quantity</label>\n          <input type=\"number\" value={state.buyQuantity} name=\"buyQuantity\" onChange={formValue} ref={buyQuantity}/>\n        </div>\n      </div>\n      <div className='section-grid'>\n        <div>Orderbook</div>\n        <div>\n          <div className='data-grid'>\n            {state.orderBook}\n          </div>\n          <hr/>\n          <div className='data-grid-totals'>\n            <span><b>Buy Total:</b><div>$ {Number(state.buyTotal).toLocaleString('en')}</div><div></div></span>\n            <span><b>Buy Volume:</b><div>WBI {Number(state.buyAvailable).toLocaleString('en')}</div><div></div></span>\n          </div>\n          <hr/>\n          <div className='data-grid-totals'>\n            <span><b>Sell Total:</b><div>$ {Number(state.sellTotal).toLocaleString('en')}</div><div></div></span>\n            <span><b>Sell Volume:</b><div>WBI {Number(state.sellAvailable).toLocaleString('en')}</div><div></div></span>\n          </div>\n          <hr/>\n          <div className='data-grid-totals'>\n            <span><b>Spread:</b><div>$ {Number(state.spread).toLocaleString('en')}</div><div></div></span>\n          </div>\n        </div>\n      </div>\n\n      <div className='section-grid'>\n        <div>Cost</div>\n        <div>\n          <label>Total USD Cost</label>\n          <input type=\"text\" readOnly value={state.usdCost} ref={usdCost} />\n        </div>\n      </div>\n\n      <div className='section-grid'>\n        <small>Order book fetched from Chinarift</small>\n        <div className='btn-grid'>\n          <div></div>\n          <button onClick={submitForm}>\n          {!state.loading ? 'Calculate' : <img src={loading} alt=\"loading\" className='loading'/>}\n            </button>\n        </div>\n      </div>\n    </div>\n\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/index.scss';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/loading.6a19979e.svg\";"],"sourceRoot":""}